@Library('jenkins-upstream-library') _

pipeline {
    agent {
        docker {
            image 'quay.io/powercloud/inbound-agent:4.6-1.5'
            args '-v /etc/resolv.conf:/etc/resolv.conf'
            label 'jump-vpc-x86_64'
        }
    }
     environment {
        //users and credentials. All must be defined in Jenkins Credentials
        GITHUB_USER = credentials('GITHUB_USER')
        IBMCLOUD_API_KEY = credentials('ODF_IBMCLOUD_API_KEY')
        GITHUB_TOKEN = credentials('GITHUB_TOKEN')
        REDHAT_USERNAME = credentials('REDHAT_USERNAME')
        REDHAT_PASSWORD = credentials('REDHAT_PASSWORD')
        PULL_SECRET = credentials('ODF_PULL_SECRET')

        //Env constants
        TERRAFORM_VER = "1.2.0"

    //    IBM_CLOUD_REGION = "syd"
    //    IBM_CLOUD_ZONE = "syd05"
     //   SERVICE_INSTANCE_ID = "22bd163a-c87c-4cea-90d2-58f7794caa43"
	IBM_CLOUD_REGION = "lon"
        IBM_CLOUD_ZONE = "lon06"
        SERVICE_INSTANCE_ID = "fac4755e-8aff-45f5-8d5c-1d3b58b7a229"	  

        BASTION_IMAGE = "rhel-86"
        RHCOS_IMAGE = "rhcos-412"
        BASTION_IMAGE_FILE = "latest-${BASTION_IMAGE}-rdr-svenkat-ocp-storage-lon06-odf-411.txt"
	RHCOS_IMAGE_FILE = "latest-${RHCOS_IMAGE}-rdr-svenkat-ocp-storage-lon06-odf-411.txt"
        OCP_RELEASE = "4.12"

        TARGET = "deploy-openshift4-powervs-script-odf"
        TEMPLATE_FILE = ".${TARGET}.tfvars.template"
        POWERVS = true
        SCRIPT_DEPLOYMENT = true
        WAIT_FOR_DEBUG = "1"
	
	 //ODF vars
	PLATFORM = "powervs"
	ODF_VERSION = "4.12"
	TIER_TEST = "1"
	 }
    
    stages {
	stage('Clone ansible extra') {
            steps {
                cloneRepo("git@github.ibm.com:redstack-power/ocp4_ansible_extras.git", "ansible_extra")
            }
        }
        stage('Clone ocs-upi-kvm') {
            steps {
                cloneRepo("https://github.com/ocp-power-automation/ocs-upi-kvm.git", "ocs-upi-kvm")
            }
        }
        stage('Setup Common Environment Variables') {
            steps {
                odfSetupCommonEnvironmentVariables()
                odfSetupClusterConfig()
            }
        }
        stage('pull artifact') {
            steps {
                getArtifacts("mirror-openshift-release", "latest-${OCP_RELEASE}-build.txt" )
                getArtifacts("powervs/odf/poll-powervs-images", "${BASTION_IMAGE_FILE}")
                getArtifacts("powervs/odf/poll-powervs-images", "${RHCOS_IMAGE_FILE}" )	    
            }
        }
        //Checkout the installer git repo
        stage('Prepare Terraform Template') {
            steps {
                script {
                    ansiColor('xterm') {
                        echo ""
                    }
                    try
                    {
                        odfPullSecret()
                        env.OPENSHIFT_IMAGE = ""
                        env.OCP_RELEASE_TAG = ""
                        if (fileExists("deploy/artifactory/latest-${OCP_RELEASE}-build.txt")) {
                            env.OPENSHIFT_IMAGE = readFile "deploy/artifactory/latest-${OCP_RELEASE}-build.txt"
                            env.OPENSHIFT_IMAGE = env.OPENSHIFT_IMAGE.trim()
                            env.OCP_RELEASE_TAG = env.OPENSHIFT_IMAGE.split(":")[1].trim()
                        }
                        else {
                            echo "latest-${OCP_RELEASE}-build.txt file does not exist. Please check mirror-openshift-release job"
                            throw err
                        }
                        if (fileExists("deploy/artifactory/${BASTION_IMAGE_FILE}")) {
                            env.BASTION_IMAGE_NAME = readFile "deploy/artifactory/${BASTION_IMAGE_FILE}"
                            env.BASTION_IMAGE_NAME = env.BASTION_IMAGE_NAME.trim()
                        }
                        else{
                            echo "${BASTION_IMAGE_FILE} file does not exist. Please check poll-powervs-job"
                            throw err
                        }
                        if (fileExists("deploy/artifactory/${RHCOS_IMAGE_FILE}")) {
                            env.RHCOS_IMAGE_NAME = readFile "deploy/artifactory/${RHCOS_IMAGE_FILE}"
                            env.RHCOS_IMAGE_NAME = env.RHCOS_IMAGE_NAME.trim()
                        }
                        else{
                            echo "${RHCOS_IMAGE_FILE} file does not exist. Please check poll-powervs-job"
                            throw err
                        }			    
                    }
                    catch (err)
                    {
                        echo 'Error ! Template preparation failed !'
                        env.FAILED_STAGE=env.STAGE_NAME
                        throw err
                    }
                }
            }
        }
        stage('Initialize Environment') {
            steps {
                odfInitializeEnvironment()
            }
        }
        stage('Setup Terraform Plugin') {
            steps {
                setupTerraformPlugin()
            }
        }
        stage('Deploy OCP Cluster') {
            steps {
                deployCluster()
            }
        }
	stage('Run crontab script for capturing outputs of multiple commands') {
            steps {
                crontabCommandCaptureScript()
            }
        }
        stage('Setup Kubectl') {
            steps {
                setupKubeconfigOcp4()
            }
        }
        stage('Run ODF Setup script') {
            steps {
                odfAuthYaml()
                odfRunSetupScript()
            }
        }	    
        stage('Run ODF deploy script') {
            steps {
                odfRunDeployScript()
            }
        }
        stage('Capture output of multiple commands to verify ODF deployment') {
            steps {
                odfRunCommands()
            }
        }	    
    }
}
